import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import requests
import time
import yfinance as yf

# to run use streamlit run api.py
# uploaded_file = st.file_uploader("choose csv file", type = "csv" file)
# if uploaded_file is not None:
#   st.write("file uploaded")
# add timechart, streamlit, and news info, check bookmarks for more, compare stocks based on news and past % increase

st.title("Live Stock Information")

# Text input for stock ticker
userInput = st.text_input("Enter Stock Ticker:")

# Time range selection for historical data
time_range = st.selectbox("Select Time Range:", ["1d", "5d", "1mo", "3mo", "6mo", "1y", "2y", "5y", "max"])

if userInput:
    ticker = userInput
    stock_number_api_key = "cda61084299c44748bf44dc22884acea"

    def get_stock_price(ticker_symbol, api):
        url = f"https://api.twelvedata.com/price?symbol={ticker_symbol}&apikey={api}"
        response = requests.get(url).json()
        price = response['price'][:-3]
        return price

    def get_stock_quote(ticker_symbol, api):
        url = f"https://api.twelvedata.com/quote?symbol={ticker_symbol}&apikey={api}"
        response = requests.get(url).json()
        return response

    def get_historical_data(ticker_symbol, period):
        stock_data = yf.download(ticker_symbol, period=period, interval="1d")
        return stock_data

    try:
        # Fetch live stock data from the Twelve Data API
        stock_price = get_stock_price(ticker, stock_number_api_key)
        stock_quote = get_stock_quote(ticker, stock_number_api_key)

        stock_name = stock_quote['name']
        high_price = stock_quote['high']
        low_price = stock_quote['low']
        open_price = stock_quote['open']

        st.write(f"**{stock_name} ({ticker})**")

        st.write("## Historical Stock Data")
        historical_data = get_historical_data(ticker, time_range)
        st.write(historical_data.tail(10))

        # Plot the historical closing prices using Matplotlib
        st.write("## Stock Closing Price Over Time")
        plt.figure(figsize=(10, 4))
        plt.plot(historical_data.index, historical_data['Close'], label='Close Price')
        plt.title(f'{stock_name} Closing Prices Over the {time_range}')
        plt.xlabel('Date')
        plt.ylabel('Close Price (USD)')
        plt.xticks(rotation=45)
        plt.legend()
        st.pyplot(plt)

    except Exception as e:
        st.write("Not a valid ticker")
